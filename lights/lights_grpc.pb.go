// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lights

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LightServiceClient is the client API for LightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	ToggleGroup(ctx context.Context, in *ToggleGroupRequest, opts ...grpc.CallOption) (*ToggleGroupResponse, error)
}

type lightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLightServiceClient(cc grpc.ClientConnInterface) LightServiceClient {
	return &lightServiceClient{cc}
}

func (c *lightServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/LightService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightServiceClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/LightService/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightServiceClient) ToggleGroup(ctx context.Context, in *ToggleGroupRequest, opts ...grpc.CallOption) (*ToggleGroupResponse, error) {
	out := new(ToggleGroupResponse)
	err := c.cc.Invoke(ctx, "/LightService/ToggleGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightServiceServer is the server API for LightService service.
// All implementations must embed UnimplementedLightServiceServer
// for forward compatibility
type LightServiceServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	ToggleGroup(context.Context, *ToggleGroupRequest) (*ToggleGroupResponse, error)
	mustEmbedUnimplementedLightServiceServer()
}

// UnimplementedLightServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLightServiceServer struct {
}

func (UnimplementedLightServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLightServiceServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedLightServiceServer) ToggleGroup(context.Context, *ToggleGroupRequest) (*ToggleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleGroup not implemented")
}
func (UnimplementedLightServiceServer) mustEmbedUnimplementedLightServiceServer() {}

// UnsafeLightServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightServiceServer will
// result in compilation errors.
type UnsafeLightServiceServer interface {
	mustEmbedUnimplementedLightServiceServer()
}

func RegisterLightServiceServer(s grpc.ServiceRegistrar, srv LightServiceServer) {
	s.RegisterService(&LightService_ServiceDesc, srv)
}

func _LightService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LightService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LightService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightServiceServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightService_ToggleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightServiceServer).ToggleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LightService/ToggleGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightServiceServer).ToggleGroup(ctx, req.(*ToggleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LightService_ServiceDesc is the grpc.ServiceDesc for LightService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LightService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LightService",
	HandlerType: (*LightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _LightService_List_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _LightService_ListGroups_Handler,
		},
		{
			MethodName: "ToggleGroup",
			Handler:    _LightService_ToggleGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/lights/lights.proto",
}
